if (typeof exmp === "undefined") {
    var exmp = {}
}
if (typeof exmp.tweet === "undefined") {
    exmp.tweet = {}
}
if (typeof exmp.tweet.conf === "undefined") {
    exmp.tweet.conf = {}
}
if (typeof exmp.tweet.core === "undefined") {
    exmp.tweet.core = {}
}
if (typeof exmp.tweet.functor === "undefined") {
    exmp.tweet.functor = {}
}
if (typeof exmp.tweet.functor.dhtml  === "undefined") {
    exmp.tweet.functor.dhtml = {}
}
if (typeof exmp.tweet.functor.event  === "undefined") {
    exmp.tweet.functor.event = {}
}
if (typeof exmp.tweet.functor.htmltag  === "undefined") {
    exmp.tweet.functor.htmltag = {}
}
if (typeof exmp.tweet.functor.request  === "undefined") {
    exmp.tweet.functor.request = {}
}
if (typeof exmp.tweet.functor.value  === "undefined") {
    exmp.tweet.functor.value = {}
}
if (typeof exmp.tweet.mock === "undefined") {
    exmp.tweet.mock = {}
}
if (typeof exmp.tweet.util === "undefined") {
    exmp.tweet.util = {}
}
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a util class of cookie.
 *
 * @author h.adachi
 */
exmp.tweet.conf.ConstantValue = {

    siteDomain: "" //"/twenglish"
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * an entry class of the application.
 * 
 * @author h.adachi
 */
exmp.tweet.core.Application = function(sender) {
    $(document).ready(function() {
        sender.init();
    })
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a controller class of the application.
 * 
 * @author h.adachi
 */
exmp.tweet.core.Controller = window;{
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    /**
     * the initialization method of the Controller class.
     * this method should be called.
     */
    exmp.tweet.core.Controller.init = function() {
        
        var controller = exmp.tweet.core.Controller;
        
        controller._initializeComponent();
    }
    
    ///////////////////////////////////////////////////////////////////////////
    // event handler methods
    
    /**
     * an event handler that called when 
     * the button of tweet is clicked.
     */
    exmp.tweet.core.Controller._doTweetButtonOnClick = function() {
        
        var updateClosure = exmp.tweet.functor.request.TweetUpdateClosure;
        var replyClosure = exmp.tweet.functor.request.TweetReplyClosure;
        
        ///////////////////////////////////////////////////
        // update the tweet status.
        
        // not reply or simple reply
        if (($("#reply-status-id").val() == "") && ($("#reply-user-name").val() == "")) {
            updateClosure.execute({
                content: $("#tweet").val(),
                userId: $("#user-id").val()
            });
            return;
        }
        
        // reply to selected status
        if (($("#reply-status-id").val()) && ($("#reply-user-name").val())) {
            replyClosure.execute({
                content: $("#tweet").val(),
                userId: $("#user-id").val(),
                statusId: $("#reply-status-id").val()
            })
            return;
        }
    }
    
    /**
     * an event handler that called when 
     * the button of setting is clicked.
     */
    exmp.tweet.core.Controller._doSettingButtonOnClick = function() {
        
        var settingClosure = exmp.tweet.functor.request.SettingClosure;
        var formFactory = exmp.tweet.functor.value.TweetFormFactory;
        
        // do the setting.
        settingClosure.execute(
            formFactory.create()
        );
    }
    
    /**
     * an event handler that called when 
     * the button of calendar back is clicked.
     */
    exmp.tweet.core.Controller._doCalendarBackButtonOnClick = function() {
        
        var calendarClosure = exmp.tweet.functor.request.CalendarClosure;
        var cookieUtil = exmp.tweet.util.StateCookieUtil;
        
        var year = $("#calendar-year").val();
        var month = $("#calendar-month").val();
        
        // decrement calendar parameter.
        if (month == "1") {
            year = parseInt(year) - 1;
            month = 12;
        } else {
            month = parseInt(month) - 1;
        }
        
        // set to div.
        $("#calendar-year").val(year);
        $("#calendar-month").val(month);
        
        // set to the cookie.
        cookieUtil.setYearAndMonth(year, month);
        
        // get the calendar.
        calendarClosure.execute({
            userId: $("#user-id").val(),
            year: year,
            month: month
        });
    }
    
    /**
     * an event handler that called when 
     * the button of calendar forward is clicked.
     */
    exmp.tweet.core.Controller._doCalendarForwardButtonOnClick = function() {
        
        var calendarClosure = exmp.tweet.functor.request.CalendarClosure;
        var cookieUtil = exmp.tweet.util.StateCookieUtil;
        
        var year = $("#calendar-year").val();
        var month = $("#calendar-month").val();
        
        // increment calendar parameter.
        if (month == "12") {
            year = parseInt(year) + 1;
            month = 1;
        } else {
            month = parseInt(month) + 1;
        }
        
        // set to div.
        $("#calendar-year").val(year);
        $("#calendar-month").val(month);
        
        // set to the cookie.
        cookieUtil.setYearAndMonth(year, month);
        
        // get the calendar.
        calendarClosure.execute({
            userId: $("#user-id").val(),
            year: year,
            month: month
        });
    }
    
    /**
     * an event handler that called when 
     * the button of search is clicked.
     */
    exmp.tweet.core.Controller._doSearchButtonOnClick = function() {
        
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        var userName = $("#screen-name").val();
        var searchText = $("#search-text").val();
        
        // request the permalink page.
        if (searchText != "") {
            location.replace(
                constantValue.siteDomain + 
                "/word/" + userName + "/" + 
                searchText + ".html"
            );
        }
    }
    
    /**
     * an event handler that called when 
     * the select of response list mode is changed.
     */
    exmp.tweet.core.Controller._responseListModeOnChange = function() {
        var responseListMode = $("#response-list-mode").val();
        if (responseListMode == "list") {
            $("#user-list-name").removeAttr("disabled");
        } else {
            $("#user-list-name").attr("disabled", "disabled");
        }
    }
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    /**
     * an event handler that called when
     * the div of tirle is clicked.
     */
    exmp.tweet.core.Controller._headerTitleDivOnClick = function() {
        $("div.container")
            .toggleClass(
                "wide", 300
            );
    }
    
    /**
     * initializes a div of the tabs area.
     */
    exmp.tweet.core.Controller._initializeTabsDiv = function() {
        $("div.tab-content div.tab").hide();
        $("div.tab-content div.tab:first").show();
        $("div.tab-content ul li:first").addClass("active");
        $("div.tab-content ul li a").click(function(){
            $("div.tab-content ul li").removeClass("active");
            $(this).parent().addClass("active");
            var currentTab = $(this).attr("href");
            $("div.tab-content div.tab").hide();
            $(currentTab).show();
            return false;
        });
    }
    
    /**
     * initializes a div of entry list.
     * an http request of ajax for get the tweet data.
     */
    exmp.tweet.core.Controller._initializeTweetListDiv = function() {
        
        var listClosure = exmp.tweet.functor.request.TweetListClosure;
        
        // get the tweet list.
        var pageUrl = location.href;
        if (!(pageUrl.indexOf("index.html") == -1)) {
            if ($("#user-id").val()) {
                listClosure.execute({
                    userId: $("#user-id").val()
                });
            }
        }
    }
    
    /**
     * initializes a div of entry list.
     * an http request of ajax for get the sidebar data.
     */
    exmp.tweet.core.Controller._initializeSidebar = function() {
        
        var calendarClosure = exmp.tweet.functor.request.CalendarClosure;
        var tagcrowdClosure = exmp.tweet.functor.request.TagcrowdClosure;
        var recentClosure = exmp.tweet.functor.request.RecentClosure;

        var calendarParamFactory = exmp.tweet.functor.value.CalendarParamFactory;
        var calendarParam = calendarParamFactory.create();

        // get the calendar.
        calendarClosure.execute({
            userId: $("#user-id").val(),
            year: calendarParam.year,
            month: calendarParam.month
        });
        
        // get the tagcrowd.
        tagcrowdClosure.execute({
           userId: $("#user-id").val()
        });
        
        // get the recent.
        recentClosure.execute({
           userId: $("#user-id").val()
        });
    }
    
    /**
     * initializes a response list mode select of form.
     */
    exmp.tweet.core.Controller._initializeResponseListModeSelect = function() {
        $("#response-list-mode").append($('<option value="home">home</option>'));
        $("#response-list-mode").append($('<option value="user">user</option>'));
        $("#response-list-mode").append($('<option value="list">list</option>'));
    }
    
    /**
     * initializes a permalink html.
     */
    exmp.tweet.core.Controller._initializePermalink = function() {
        
        // set highlights.
        var pageUrl = location.href;
        if ((pageUrl.indexOf("index.html") == -1)) {
            $("p.permalink-text").highlight($("div.permalink-word").text());
        }
    }
    
    /**
     * initialize a component of the view class.
     */
    exmp.tweet.core.Controller._initializeComponent = function() {
        
        var controller = exmp.tweet.core.Controller;
        
        // calls for the initialization methods.
        
        controller._initializeSidebar();
        
        controller._initializeTabsDiv();
        
        controller._initializeTweetListDiv();
        
        controller._initializeResponseListModeSelect();
        
        controller._initializePermalink();
        
        // set the control's event handler.
        
        $("#tweet").keyup(function(event) {
            // clear reply param.
            // TODO: search user name?
            if ($("#tweet").val() == "") {
                $("#reply-status-id").val("")
                $("#reply-user-name").val("")
                console.log("reply-status-id: ");
                console.log("reply-user-name: ");
            }
        });
        
        $("#tweet-button").click(function() { 
            controller._doTweetButtonOnClick();
        });
        
        $("#setting-button").click(function() {
            controller._doSettingButtonOnClick();
        });
        
        $("#search-button").click(function() {
            controller._doSearchButtonOnClick();
        });
        
        $("span.header-title").click(function() {
            controller._headerTitleDivOnClick();
        });
        
        $("#response-list-mode").change(function() {
            controller._responseListModeOnChange();
        });
        
        // and do a some initialize.
        
        // profile
        $("#user-description").hide();
        $("#user-show-profile").toggle(
            function () {
                $("#user-description").show();
            },
            function () {
                $("#user-description").hide();
            }
        );
        
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the html table of the calendar.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.dhtml.CalendarUpdataClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var transformer = exmp.tweet.functor.htmltag.CalendarTransformer;
        
        $("#tweet-calendar").html(
            transformer.transform(
                obj
            )
        );
        
        // set the calendar's event handler.
        var controller = exmp.tweet.core.Controller;
        
        $("#calendar-back").click(function() {
            controller._doCalendarBackButtonOnClick();
        });
        
        $("#calendar-forward").click(function() {
            controller._doCalendarForwardButtonOnClick();
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the html table of the recent.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.dhtml.RecentUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var transformer = exmp.tweet.functor.htmltag.RecentTransformer;
        
        $("#tweet-recent").html(
            transformer.transform(
                obj
            )
        );
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the setting tab.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.dhtml.SettingTabUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        // get setting parameters and set to div.
        var responseListMode = $.cookie("__twenglish_response_list_mode");
        var userListName = $.cookie("__twenglish_user_list_name");
        if (responseListMode == "list") {
            $("#response-list-mode").val(responseListMode);
            $("#user-list-name").val(userListName);
        } else {
            $("#response-list-mode").val(responseListMode);
            $("#user-list-name").attr("disabled", "disabled");
        }
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the html table of the tagcrowd.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.dhtml.TagcrowdUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var transformer = exmp.tweet.functor.htmltag.TagcrowdTransformer;
        
        $("#tweet-tagcrowd").html(
            transformer.transform(
                obj
            )
        );

        // add the tagcrowd height to the content min height.
        var minHeight = $("div.content").css("min-height").replace("px", "");
        var newMinHeight = parseInt(minHeight) + parseInt($("div.tagcrowd-content").height());
        $("div.content").css("min-height", newMinHeight);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the html table of the tweet list.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.dhtml.TweetListUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var transformer = exmp.tweet.functor.htmltag.TweetListTransformer;
        
        $("#tweet-list-block").html(
            transformer.transform(
                obj
            )
        );
        
        // add the tagcrowd height to the content min height.
        var minHeight = $("div.content").css("min-height").replace("px", "");
        var newMinHeight = parseInt(minHeight) + parseInt($("div.tagcrowd-content").height());
        $("div.content").css("min-height", newMinHeight);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of the delete tweet.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.event.DeleteEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var deleteClosure = exmp.tweet.functor.request.TweetDeleteClosure;
        
        // dynamically generate an event handler.
        $("#action-delete-" + obj.statusId).click(function() {
            deleteClosure.execute({
                userId: $("#user-id").val(),
                statusId: obj.statusId
            });
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * build the event handler.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.event.EventBuildClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var replyEventClosure = exmp.tweet.functor.event.ReplyEventClosure;
        var deleteEventClosure = exmp.tweet.functor.event.DeleteEventClosure;
        var retweetEventClosure = exmp.tweet.functor.event.RetweetEventClosure;
        var favoriteEventClosure = exmp.tweet.functor.event.FavoriteEventClosure;
        var tweetListEffectClosure = exmp.tweet.functor.event.TweetListEffectClosure;
        
        for (var i = 0; i < obj.tweetModelList.length; i++) {
            var statusId = obj.tweetModelList[i].statusId;
            
            // set the event handler for reply.
            replyEventClosure.execute({
                statusId: statusId
            });
            
            // set the event handler for delete.
            deleteEventClosure.execute({
                statusId: statusId
            });
            
            // set the event handler for retweet.
            retweetEventClosure.execute({
                statusId: statusId
            });
            
            // set the event handler for favor.
            favoriteEventClosure.execute({
                statusId: statusId
            });
            
            // set the event handler for tweet list effect.
            tweetListEffectClosure.execute({
                statusId: statusId
            });
        }
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of the favorite tweet.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.event.FavoriteEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var favoriteClosure = exmp.tweet.functor.request.TweetFavoriteClosure;
        
        // dynamically generate an event handler.
        $("#action-favorite-" + obj.statusId).click(function() {
            favoriteClosure.execute({
                userId: $("#user-id").val(),
                statusId: obj.statusId
            });
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of the reply tweet.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.event.ReplyEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        // dynamically generate an event handler.
        $("#action-reply-" + obj.statusId).click(function() {
             var userName = $("#action-reply-" + obj.statusId).attr("user-name");
             $("#reply-status-id").val(obj.statusId);
             $("#reply-user-name").val(userName);
             $("#tweet").val("@" + userName + " ");
             
             console.log("reply-status-id: " + obj.statusId);
             console.log("reply-user-name: " + userName);
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of the retweet tweet.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.event.RetweetEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var retweetClosure = exmp.tweet.functor.request.TweetRetweetClosure;
        
        // dynamically generate an event handler.
        $("#action-retweet-" + obj.statusId).click(function() {
            retweetClosure.execute({
                userId: $("#user-id").val(),
                statusId: obj.statusId
            });
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of tweet list effect.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.event.TweetListEffectClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        // dynamically generate an event handler.
        $("#tweet-list-td-" + obj.statusId).hover(
            function () {
                $("#action-reply-" + obj.statusId).css({
                    cursor: "pointer",
                    color: "tan"
                });
                $("#action-delete-" + obj.statusId).css({
                    cursor: "pointer",
                    color: "tan"
                });
                $("#action-retweet-" + obj.statusId).css({
                    cursor: "pointer",
                    color: "tan"
                });
                $("#action-favorite-" + obj.statusId).css({
                    cursor: "pointer",
                    color: "tan"
                });
            },
            function () {
                $("#action-reply-" + obj.statusId).css({
                    color: "lightyellow"
                });
                $("#action-delete-" + obj.statusId).css({
                    color: "lightyellow"
                });
                $("#action-retweet-" + obj.statusId).css({
                    color: "lightyellow"
                });
                $("#action-favorite-" + obj.statusId).css({
                    color: "lightyellow"
                });
            }
        );
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * this class is a transformer that json data get by
 * ajax http requests and convert to html tags.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.htmltag.CalendarTransformer = {
    
    _daynames: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        
        // TODO: need null if user new.
        
        var calendarParamFactory = exmp.tweet.functor.value.CalendarParamFactory;
        var calendarParam = calendarParamFactory.create();
        
        // dynamically generate an html tags.
        if (obj.calendarModelList != null) {
            // set calendar parameter.
            return this._getCalendar(
                calendarParam.year,
                calendarParam.month,
                $('#tweet-calendar'),
                obj
            );
        }
        return null;
    },
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    _getCalendar: function(year, month, jelem, obj) {
        return this._getCalendarTag(
            year,
            month,
            jelem.get(0),
            obj
        );
    },
    
    _getLeap: function(year) {
        return year % 4 ? 0 : year % 100 ? 1 : year % 400 ? 0 : 1;
    },
    
    _createCalendarArray: function(year) {
        var months = [31, 28 + this._getLeap(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var result = [];
        for (var m = 0; m < 12; m++) {
            result[m] = [];
            var dofw1 = (new Date(year, m, 1, 0, 0, 0)).getDay();
            for (var d = 1; d <= months[m]; d++) {
                result[m][d + dofw1 - 1] = d;
            }
        }
        return result;
    },
    
    _createCalendarMonthly: function(year, month, obj) {
        var m = month - 1;
        var calendar = this._createCalendarArray(year);
        var table = document.createElement('table');
        // header
        var tr = document.createElement('tr');
        for (var d = 0; d < 7; d++) {
            var th = document.createElement('th');
            th.innerHTML = th.className = this._daynames[d];
            tr.appendChild(th);
        }
        var thead = document.createElement('thead');
        thead.appendChild(tr);
        
        // body
        var tbody = document.createElement('tbody');
        for (var d = 0, l = calendar[m].length; d < l; d++) {
            if (d % 7 == 0) { 
                tr = document.createElement('tr');
            }
            var td = document.createElement('td');
            if (calendar[m][d]) {
                var day = calendar[m][d];
                var link = this._getLinkUrl(day, obj);
                var count = this._getTweetCount(day, obj);
                if (link) {
                    td.innerHTML = 
                        "<a class='day-a' href='" + link + "' title='" + count + " tweets'>" + 
                            day + 
                        "</a>";
                }
                else {
                    td.innerHTML = day;
                }
                td.className = this._daynames[d % 7].toLowerCase();
            }
            tr.appendChild(td);
            if (d % 7 == 6) {
                tbody.appendChild(tr);
            }
        }
        tbody.appendChild(tr);
        table.className = 'calendar-table';
        
        // caption
        var caption = document.createElement('caption');
        caption.innerHTML = 
            "<table class='calendar-caption-table'>" + 
                "<tr>" + 
                    "<td>" + "<div id='calendar-back'>&lt;</div>" + "</td>" +
                    "<td>" + "<div id='calendar-title'>" + year + '.' + (month) + "</div></td>" +
                    "<td>" + "<div id='calendar-forward'>&gt;</div>" + "</td>" +
                "</tr>" +
            "</table>";
        
        table.appendChild(caption);
        table.appendChild(thead);
        table.appendChild(tbody);
        return table;
    },
    
    _getCalendarTag: function(year, month, element, obj) {
        element.innerHTML = "";
        var calendarTable = this._createCalendarMonthly(year, month, obj);
        element.appendChild(calendarTable);
        return element.innerHTML;
    },
    
    _getLinkUrl: function(day, obj) {
        for (var i = 0; i < obj.calendarModelList.length; i++) {
            if ((obj.calendarModelList[i].day == day) && 
                (obj.calendarModelList[i].isExist == true)) {
                return obj.calendarModelList[i].linkUrl;
            }
        }
        return null;
    },
    
    _getTweetCount: function(day, obj) {
        for (var i = 0; i < obj.calendarModelList.length; i++) {
            if ((obj.calendarModelList[i].day == day) && 
                (obj.calendarModelList[i].isExist == true)) {
                return obj.calendarModelList[i].count;
            }
        }
        return null;
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * this class is a transformer that json data get by
 * ajax http requests and convert to html tags.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.htmltag.RecentTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        // dynamically generate an html tags.
        var html = "<div>";
        if (obj.tweetModelList != null) {
            for (var i = 0; i < obj.tweetModelList.length; i++) {
                
                // get the value.
                var name = obj.tweetModelList[i].userName;
                var text = obj.tweetModelList[i].text;
                var statusId = obj.tweetModelList[i].statusId;
                
                // create an html tag.
                html += "<div class='recent-div'>" +
                            "<a href='" + constantValue.siteDomain + "/tweet/" + name + "/" + statusId + ".html" + 
                                "' id='recent-a-" + statusId + 
                                "' class='recent-a'>" + this._getShortText(text) + 
                            "</a>" +
                        "</div>";
            }
            if (obj.tweetModelList.length == 0) {
                html += "<div class='nodata'>No Data.</div>";
            }
            html += "</div>";
        }
        return html;
    },
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    _getShortText: function(text) {
        var markOmitted = "";
        if (text.length > 17) {
            markOmitted = " ..."
        }
        var shorted = text.substring(0, 17)
        return shorted + markOmitted;
    }
    
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * this class is a transformer that json data get by
 * ajax http requests and convert to html tags.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.htmltag.TagcrowdTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        
        // dynamically generate an html tags.
        var html = "<div>";
        if (obj.tagcrowdModelList != null) {
            for (var i = 0; i < obj.tagcrowdModelList.length; i++) {
                
                // get the value
                var text = obj.tagcrowdModelList[i].text;
                var link = obj.tagcrowdModelList[i].linkUrl;
                link = link.replace(/'/, "&apos;");
                var count = obj.tagcrowdModelList[i].count;

                // create an html tag.
                html += "<span class='tagcrowd-span'>" +
                            "<a href='" + link + 
                                "' title='" + count + " tweets" +
                                "' class='tagcrowd-a'>" + text + 
                            "</a>" +
                        "</span>";
            }
            if (obj.tagcrowdModelList.length == 0) {
                html += "<div class='nodata'>No Data.</div>";
            }
            html += "</div>";
        }
        return html;
    }
        
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * this class is a transformer that json data get by
 * ajax http requests and convert to html tables.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.htmltag.TweetListTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        
        // set the user list name for the select.
        if (obj.userListNameList != null) {
            for (var h = 0; h < obj.userListNameList.length; h++) {
                var listName = obj.userListNameList[h];
                $("#user-list-name").append(
                    $("<option value='" + listName +"'>" + listName + "</option>")
                );
                // TODO: set the value in this?
            }
        }
        
        // dynamically generate an html table.
        var table = "<table class='tweet-list-table'>";
        if (obj.tweetModelList != null) {
            for (var i = 0; i < obj.tweetModelList.length; i++) {
                
                // get the value.
                var image = obj.tweetModelList[i].userProfileImageURL;
                var name = obj.tweetModelList[i].userName;
                var text = obj.tweetModelList[i].text;
                var statusId = obj.tweetModelList[i].statusId;
                var isFavorited = obj.tweetModelList[i].isFavorited;
                var created = obj.tweetModelList[i].created;
                
                // create an html tag and set the entry code.
                table +=
                    "<tr class='tweet-list-tr'>" +
                        "<td class='tweet-icon-td'>" +
                            "<div class='tweet-icon'>" +
                                "<img src='" + image + "' width='48' height='48' border='0'>" +
                            "</div>" +
                        "</td>" +
                        "<td id='tweet-list-td-" + statusId + "' class='tweet-list-td' >" +
                            "<div>" + 
                                "<span><b>" + name + "</b></span>" +
                                this._getCreatedSpan(created) +
                                this._getReplySpan(name, statusId) +
                                this._getDeleteSpan(name, statusId) +
                                this._getRetweetSpan(name, statusId) +
                                this._getFavoriteSpan(name, statusId, isFavorited) +
                            "</div>" +
                            "<span id='id-" + statusId + "'>" + text + "</span>" +
                        "</td>" +
                    "</tr>";
            }
            table += "</table>";
        }
        return table;
        
    },
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    _getReplySpan: function(name, statusId) {
        return "<span id='action-reply-" + statusId +
                   "' class='action-reply' status-id='" + statusId +
                   "' user-name='" + name + "'>Reply</span>";
    },
    
    _getDeleteSpan: function(name, statusId) {
        if (name != $("#screen-name").val()) {
            return "";
        }
        return "<span id='action-delete-" + statusId +
                   "' class='action-delete' status-id='" + statusId +
                   "' user-name='" + name + "'>Delete</span>";
    },
    
    _getRetweetSpan: function(name, statusId) {
        if (name == $("#screen-name").val()) {
            return "";
        }
        return "<span id='action-retweet-" + statusId +
                   "' class='action-retweet' status-id='" + statusId +
                   "' user-name='" + name + "'>Retweet</span>";
    },
    
    _getFavoriteSpan: function(name, statusId, isFavorited) {
        var str = "Favorite";
        if (isFavorited) {
            str = "Favorited";
        }
        return "<span id='action-favorite-" + statusId +
                   "' class='action-favorite' status-id='" + statusId +
                   "' user-name='" + name + "'>" + str + "</span>";
    },
    
    _getCreatedSpan: function(created) {
        var date = new Date(created);
        return "<span class='tweet-created'>" + moment(date).fromNow(true) + "</span>";
    }
    
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for get the calendar.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.CalendarClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("calendar begin.");
        
        var calendarUpdateClosure = exmp.tweet.functor.dhtml.CalendarUpdataClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        // create an ajax object.
        new $.ajax({
            url: constantValue.siteDomain + "/calendar.html",
            type: "POST",
            data: {
                user_id: obj.userId,
                year: obj.year,
                month: obj.month
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                // update the HTML table of the calendar.
                calendarUpdateClosure.execute(
                    data
                );
                
                console.log("calendar complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for get the request.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.RecentClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("recent begin.");
        
        var recentUpdateClosure = exmp.tweet.functor.dhtml.RecentUpdateClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        // create an ajax object.
        new $.ajax({
            url: constantValue.siteDomain + "/recent.html",
            type: "POST",
            data: {
                user_id: obj.userId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                // update the HTML table of the tagcrowd.
                recentUpdateClosure.execute(
                    data
                );
                
                console.log("recent complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for the setting.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.SettingClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("setting begin.");
        
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        // create an ajax object.
        new $.ajax({
            url: constantValue.siteDomain + "/setting.html",
            type: "POST",
            data: obj,
            dataType: "json",
            contentType: "application/json;charset=UTF-8",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                
                // ** success in this class method. **
                // because, this ajax requests are redirected as normal.
                if (XMLHttpRequest.status == 200) {
                    console.log("setting complete.");
                    
                    // reload
                    location.reload();
                    
                    return;
                }
                
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for get the tagcrowd.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.TagcrowdClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tagcrowd begin.");
        
        var tagcrowdUpdateClosure = exmp.tweet.functor.dhtml.TagcrowdUpdateClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        // create an ajax object.
        new $.ajax({
            url: constantValue.siteDomain + "/tagcrowd.html",
            type: "POST",
            data: {
                user_id: obj.userId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                // update the HTML table of the tagcrowd.
                tagcrowdUpdateClosure.execute(
                    data
                );
                
                console.log("tagcrowd complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for delete action.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.TweetDeleteClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet delete begin.");
        
        var listUpdateClosure = exmp.tweet.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.tweet.functor.event.EventBuildClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        new $.ajax({
            url: constantValue.siteDomain + "/delete.html",
            type: "POST",
            data: {
                user_id: obj.userId,
                status_id: obj.statusId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
                
                console.log("tweet delete complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for favorite action.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.TweetFavoriteClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet favorite begin.");
        
        var listUpdateClosure = exmp.tweet.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.tweet.functor.event.EventBuildClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        new $.ajax({
            url: constantValue.siteDomain + "/favorite.html",
            type: "POST",
            data: {
                user_id: obj.userId,
                status_id: obj.statusId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
                
                console.log("tweet favorite complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for get the tweet list.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.TweetListClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet list begin.");
        
        var listUpdateClosure = exmp.tweet.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.tweet.functor.event.EventBuildClosure;
        var settingTabUpdateClosure = exmp.tweet.functor.dhtml.SettingTabUpdateClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        // create an ajax object.
        new $.ajax({
            url: constantValue.siteDomain + "/list.html",
            type: "GET",
            data: {
                user_id: obj.userId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    console.log("application error occurred.");
                    $("#tweet-list-block").html("");
                    return;
                }
                
                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
            
                // update the setting tab.
                settingTabUpdateClosure.execute(null);
            
                console.log("tweet list complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
                $("#tweet-list-block").html("");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for reply tweet.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.TweetReplyClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet reply begin.");
        
        var listUpdateClosure = exmp.tweet.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.tweet.functor.event.EventBuildClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        new $.ajax({
            url: constantValue.siteDomain + "/reply.html",
            type: "POST",
            data: {
                tweet: obj.content,
                user_id: obj.userId,
                status_id: obj.statusId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
                
                $("#reply-status-id").val("");
                $("#reply-user-name").val("");
                $("#tweet").val("");
                
                console.log("tweet reply complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for retweet action.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.TweetRetweetClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet retweet begin.");
        
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        new $.ajax({
            url: constantValue.siteDomain + "/retweet.html",
            type: "POST",
            data: {
                user_id: obj.userId,
                status_id: obj.statusId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }
                
                console.log("tweet retweet complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send http request for tweet.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.request.TweetUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("tweet update begin.");
        
        var listUpdateClosure = exmp.tweet.functor.dhtml.TweetListUpdateClosure;
        var eventBuildClosure = exmp.tweet.functor.event.EventBuildClosure;
        var constantValue = exmp.tweet.conf.ConstantValue;
        
        new $.ajax({
            url: constantValue.siteDomain + "/update.html",
            type: "POST",
            data: {
                tweet: obj.content,
                user_id: obj.userId
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                if (data.isError) {
                    console.log("application error occurred.");
                    return;
                }

                // update the HTML table of the tweet list.
                listUpdateClosure.execute(
                    data
                );
                
                // build the event of the tweet list.
                eventBuildClosure.execute(
                    data
                );
                
                $("#tweet").val("");
                
                console.log("tweet update complete.");
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.log("http request error occurred.");
            }
        });
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the value for calendar.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.value.CalendarParamFactory = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    create: function() {

        var currentYear = $("#calendar-year").val();
        var currentMonth = $("#calendar-month").val();

        // new http request.
        if (currentYear == "" && currentMonth == "") {

            // get the cookie year and month.
            var siteParam = $.cookie('__twenglish_state_param');
            if (siteParam != null) {
                var paramArray = siteParam.split(";");
                var year = "";
                var month = "";
                for (var i = 0; i < paramArray.length; i++) {
                    var paramString = paramArray[i];
                    var keyAndValue = paramString.split("=");
                    var key = keyAndValue[0];
                    var value = keyAndValue[1];
                    if (key == "calendar-year") {
                        console.log("find year in cookie - year: " + value);
                        year = value;
                    } else if (key == "calendar-month") {
                        console.log("find month in cookie - month: " + value);
                        month = value;
                    }
                }
                
                // set year and month as current.
                $("#calendar-year").val(year);
                $("#calendar-month").val(month);
                
                // get cookie year and month.
                var param0 = {
                    year: year,
                    month: month
                }
                return param0;
                
            } else {
                // get real year and month.
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth() + 1;

                // set year and month as current.
                $("#calendar-year").val(year);
                $("#calendar-month").val(month);

                // create as current parameter.
                var param1 = {
                    year: year,
                    month: month
                }
                return param1;
            }
        
        // ajax request.
        } else {
            // get current year and month.
            var param2 = {
                year: currentYear,
                month: currentMonth
            }
            return param2;
        }
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the value from the html form and 
 * create a json object for http post.
 * 
 * @author h.adachi
 */
exmp.tweet.functor.value.TweetFormFactory = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    create: function() {
        // convert the form data to JSON.
        var param = {};
        $($("#tweet-form").serializeArray()).each(
            function(i, v) {
                param[v.name] = v.value;
            }
        );
        return $.toJSON(param);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * called the main entry.
 * 
 * @author h.adachi
 */
new exmp.tweet.core.Application(
    this
);
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a simple class of the Hoge.
 * 
 * @author h.adachi
 */
exmp.tweet.mock.Hoge = function(name, age) {
    this.name = name;
    this.age = age;
}
exmp.tweet.mock.Hoge.prototype = {
    say : function () {
        console.log("my name " + this.name + " age is " + this.age);
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a util class of cookie.
 * 
 * @author h.adachi
 */
exmp.tweet.util.StateCookieUtil = {
    
    key: "__twenglish_state_param",

    setYearAndMonth: function (year, month) {
        var siteParam = $.cookie(this.key);
        var newSiteParam = "";
        if (siteParam != null) {
            var paramArray = siteParam.split(";");
            for (var i = 0; i < paramArray.length; i++) {
                var paramString = paramArray[i];
                var keyAndValue = paramString.split("=");
                var key = keyAndValue[0];
                var value = keyAndValue[1];
                if ((key != "calendar-year") && (key != "calendar-month")) {
                    if (newSiteParam != "") {
                        newSiteParam += ";";
                    }
                    newSiteParam += key + "=" + value;
                } else if (key == "calendar-year") {
                    if (newSiteParam != "") {
                        newSiteParam += ";";
                    }
                    newSiteParam += "calendar-year=" + year;
                } else if (key == "calendar-month") {
                    if (newSiteParam != "") {
                        newSiteParam += ";";
                    }
                    newSiteParam += "calendar-month=" + month;
                }
            }
            $.cookie(
                '__twenglish_state_param',
                newSiteParam,
                {
                    expires: 7,
                    path: '/' 
                }
            );
        } else {
            var param = "calendar-year=" + year + ";" + "calendar-month=" + month;
            $.cookie(
                '__twenglish_state_param',
                param,
                {
                    expires: 7,
                    path: '/'
                }
            );
        }
    }
}
if (typeof exmp.english === "undefined") {
    exmp.english = {}
}
if (typeof exmp.english.functor === "undefined") {
    exmp.english.functor = {}
}
